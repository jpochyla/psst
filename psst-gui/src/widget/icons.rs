use crate::ui::theme;
use druid::{kurbo::BezPath, widget::prelude::*, Affine, Color, KeyOrValue, Size};

pub static LOGO: SvgIcon = SvgIcon {
    svg_path: "M2.34146 0.685791L28.5825 26.9268L26.9268 28.5825L0.685791 2.34145L2.34146 0.685791Z M22.2439 11.7073V15.2195C22.2441 15.8464 22.1721 16.4712 22.0295 17.0817L23.9012 18.9512C24.3547 17.7594 24.5865 16.4947 24.5854 15.2195V11.7073H22.2439ZM15.2195 29.2683V25.691C16.6827 25.5282 18.0952 25.0587 19.3646 24.3132L17.6342 22.5841C16.3849 23.1891 15.0025 23.4672 13.6165 23.3925C12.2305 23.3178 10.886 22.8926 9.70906 22.1568C8.53207 21.421 7.56101 20.3986 6.88673 19.1853C6.21245 17.9721 5.85701 16.6076 5.85367 15.2195V11.7073H3.51221V15.2195C3.51221 20.6341 7.61708 25.1063 12.8781 25.691V29.2683H8.19513V31.6098H19.9025V29.2683H15.2195ZM19.9025 14.9539V7.02438C19.9025 3.74194 17.3312 1.17072 14.0488 1.17072C13.029 1.16706 12.0261 1.43096 11.1402 1.93606C10.2542 2.44117 9.5163 3.16981 9.00001 4.04926 M8.19513 13.1437V15.1464C8.19618 16.706 8.81282 18.2022 9.91098 19.3098C10.66 20.0884 11.6134 20.6402 12.6617 20.9017C13.71 21.1633 14.8108 21.1241 15.8378 20.7886L8.19513 13.1437Z",
    svg_size: Size::new(29.0, 32.0),
    op: PaintOp::Fill,
};

pub static STORAGE: SvgIcon = SvgIcon {
    svg_path: "M8 6.5C11.3137 6.5 14 5.38071 14 4C14 2.61929 11.3137 1.5 8 1.5C4.68629 1.5 2 2.61929 2 4C2 5.38071 4.68629 6.5 8 6.5Z M14 6.6875C14 8.06813 11.3125 9.1875 8 9.1875C4.6875 9.1875 2 8.06813 2 6.6875M14 9.375C14 10.7556 11.3125 11.875 8 11.875C4.6875 11.875 2 10.7556 2 9.375 M2 3.97625V12.0238C2 13.3913 4.6875 14.5 8 14.5C11.3125 14.5 14 13.3913 14 12.0238V3.97625",
    svg_size: Size::new(16.0, 16.0),
    op: PaintOp::Stroke { width: 1.0 },
};
pub static PREFERENCES: SvgIcon = SvgIcon {
    svg_path: "M2 8H4.5M11.5 4H14H11.5ZM2 4H9.5H2ZM11.5 12H14H11.5ZM2 12H9.5H2ZM6.5 8H14H6.5Z M10.5 5C11.0523 5 11.5 4.55228 11.5 4C11.5 3.44771 11.0523 2.99999 10.5 2.99999C9.94772 2.99999 9.5 3.44771 9.5 4C9.5 4.55228 9.94772 5 10.5 5Z M5.5 9C6.05228 9 6.5 8.55228 6.5 8C6.5 7.44772 6.05228 7 5.5 7C4.94772 7 4.5 7.44772 4.5 8C4.5 8.55228 4.94772 9 5.5 9Z M10.5 13C11.0523 13 11.5 12.5523 11.5 12C11.5 11.4477 11.0523 11 10.5 11C9.94772 11 9.5 11.4477 9.5 12C9.5 12.5523 9.94772 13 10.5 13Z",
    svg_size: Size::new(16.0, 16.0),
    op: PaintOp::Stroke { width: 1.0 },
};

pub static BACK: SvgIcon = SvgIcon {
    svg_path: "M9.70711 0.292893C10.0976 0.683417 10.0976 1.31658 9.70711 1.70711L2.41421 9L9.70711 16.2929C10.0976 16.6834 10.0976 17.3166 9.70711 17.7071C9.31658 18.0976 8.68342 18.0976 8.29289 17.7071L0.292893 9.70711C-0.0976311 9.31658 -0.0976311 8.68342 0.292893 8.29289L8.29289 0.292893C8.68342 -0.0976311 9.31658 -0.0976311 9.70711 0.292893Z",
    svg_size: Size::new(10.0, 18.0),
    op: PaintOp::Fill,
};
pub static PLAY: SvgIcon = SvgIcon {
    svg_path: "M4.92623 21.4262L19.9262 12.4262L4.92623 3.42623V21.4262Z",
    svg_size: Size::new(24.0, 24.0),
    op: PaintOp::Fill,
};
pub static PAUSE: SvgIcon = SvgIcon {
    svg_path: "M10.9262 20.6762H7.17623V4.17623H10.9262V20.6762ZM17.6762 20.6762H13.9262V4.17623H17.6762V20.6762Z",
    svg_size: Size::new(24.0, 24.0),
    op: PaintOp::Fill,
};
pub static SKIP_BACK: SvgIcon = SvgIcon {
    svg_path: "M7.15139 3.42623V11.0912L19.9262 3.42623V21.4262L7.15139 13.7612V21.4262H4.92623V3.42623H7.15139Z",
    svg_size: Size::new(24.0, 24.0),
    op: PaintOp::Fill,
};
pub static SKIP_FORWARD: SvgIcon = SvgIcon {
    svg_path: "M17.7011 3.42623V11.0912L4.92623 3.42623V21.4262L17.7011 13.7612V21.4262H19.9262V3.42623H17.7011Z",
    svg_size: Size::new(24.0, 24.0),
    op: PaintOp::Fill,
};
pub static PLAY_SHUFFLE: SvgIcon = SvgIcon {
    svg_path: "M17.7011 3.42623V11.0912L4.92623 3.42623V21.4262L17.7011 13.7612V21.4262H19.9262V3.42623H17.7011Z",
    svg_size: Size::new(24.0, 24.0),
    op: PaintOp::Fill,
};
pub static PLAY_LOOP: SvgIcon = SvgIcon {
    svg_path: "M256 256s-48-96-126-96c-54.12 0-98 43-98 96s43.88 96 98 96c30 0 56.45-13.18 78-32M256 256s48 96 126 96c54.12 0 98-43 98-96s-43.88-96-98-96c-29.37 0-56.66 13.75-78 32",
    svg_size: Size::new(24.0, 24.0),
    op: PaintOp::Fill,
};

pub static SAD_FACE: SvgIcon = SvgIcon {
    svg_path: "M5.42858 8.00001C5.90197 8.00001 6.28573 7.61625 6.28573 7.14286C6.28573 6.66948 5.90197 6.28572 5.42858 6.28572C4.9552 6.28572 4.57144 6.66948 4.57144 7.14286C4.57144 7.61625 4.9552 8.00001 5.42858 8.00001Z M8.00002 9.14285C9.62216 9.14285 10.9864 10.1975 11.4182 11.6368C11.4304 11.6797 11.4322 11.725 11.4237 11.7688C11.4152 11.8126 11.3965 11.8539 11.3692 11.8892C11.3419 11.9245 11.3066 11.9529 11.2664 11.9722C11.2261 11.9914 11.1818 12.0009 11.1372 12H4.86252C4.81802 12.0006 4.77398 11.9909 4.73391 11.9716C4.69385 11.9522 4.65885 11.9237 4.63173 11.8885C4.6046 11.8532 4.58609 11.8121 4.57767 11.7684C4.56925 11.7247 4.57115 11.6796 4.58323 11.6368C5.01144 10.1975 6.37609 9.14285 8.00002 9.14285Z M10.5714 8.00001C11.0448 8.00001 11.4286 7.61625 11.4286 7.14286C11.4286 6.66948 11.0448 6.28572 10.5714 6.28572C10.0981 6.28572 9.71429 6.66948 9.71429 7.14286C9.71429 7.61625 10.0981 8.00001 10.5714 8.00001Z M8.00001 1.07144C4.17347 1.07144 1.07144 4.17347 1.07144 8.00001C1.07144 11.8266 4.17347 14.9286 8.00001 14.9286C11.8266 14.9286 14.9286 11.8266 14.9286 8.00001C14.9286 4.17347 11.8266 1.07144 8.00001 1.07144ZM0.0714417 8.00001C0.0714417 3.62118 3.62118 0.0714417 8.00001 0.0714417C12.3788 0.0714417 15.9286 3.62118 15.9286 8.00001C15.9286 12.3788 12.3788 15.9286 8.00001 15.9286C3.62118 15.9286 0.0714417 12.3788 0.0714417 8.00001Z",
    svg_size: Size::new(16.0, 16.0),
    op: PaintOp::Fill,
};

pub static SEARCH: SvgIcon = SvgIcon {
    svg_path: "M14.2716 13.1684L11.3313 10.2281C12.0391 9.28573 12.4213 8.13865 12.42 6.96C12.42 3.94938 9.97062 1.5 6.96 1.5C3.94938 1.5 1.5 3.94938 1.5 6.96C1.5 9.97062 3.94938 12.42 6.96 12.42C8.13865 12.4213 9.28573 12.0391 10.2281 11.3313L13.1684 14.2716C13.3173 14.4046 13.5114 14.4756 13.711 14.47C13.9105 14.4645 14.1004 14.3827 14.2415 14.2415C14.3827 14.1004 14.4645 13.9105 14.47 13.711C14.4756 13.5114 14.4046 13.3173 14.2716 13.1684ZM3.06 6.96C3.06 6.18865 3.28873 5.43463 3.71727 4.79328C4.14581 4.15192 4.7549 3.65205 5.46753 3.35687C6.18017 3.06169 6.96433 2.98446 7.72085 3.13494C8.47738 3.28542 9.17229 3.65686 9.71772 4.20228C10.2631 4.74771 10.6346 5.44262 10.7851 6.19915C10.9355 6.95567 10.8583 7.73983 10.5631 8.45247C10.2679 9.1651 9.76808 9.77419 9.12672 10.2027C8.48537 10.6313 7.73135 10.86 6.96 10.86C5.92604 10.8588 4.93478 10.4475 4.20365 9.71635C3.47253 8.98522 3.06124 7.99396 3.06 6.96Z",
    svg_size: Size::new(16.0, 16.0),
    op: PaintOp::Fill,
};
pub static HEART: SvgIcon = SvgIcon {
    svg_path: "M11.7099 0.642857C9.22488 0.642857 8 3.13636 8 3.13636C8 3.13636 6.77512 0.642857 4.29014 0.642857C2.27062 0.642857 0.671387 2.3626 0.650717 4.41467C0.608612 8.67428 3.97053 11.7035 7.6555 14.2492C7.75709 14.3196 7.87713 14.3572 8 14.3572C8.12287 14.3572 8.24291 14.3196 8.3445 14.2492C12.0291 11.7035 15.391 8.67428 15.3493 4.41467C15.3286 2.3626 13.7294 0.642857 11.7099 0.642857V0.642857Z",
    svg_size: Size::new(16.0, 15.0),
    op: PaintOp::Stroke { width: 1.0 },
};
pub static ARTIST: SvgIcon = SvgIcon {
    svg_path: "M8 0.0191841C3.58885 0.0191841 0 3.59942 0 8C0 12.4006 3.58885 15.9808 8 15.9808C12.4112 15.9808 16 12.4006 16 8C16 3.59942 12.4112 0.0191841 8 0.0191841ZM6.06846 4.50149C6.55577 3.98619 7.24154 3.70264 8 3.70264C8.75846 3.70264 9.43808 3.9881 9.92731 4.50609C10.4231 5.03098 10.6642 5.73621 10.6073 6.49439C10.4935 8 9.32423 9.22782 8 9.22782C6.67577 9.22782 5.50423 8 5.39269 6.494C5.33615 5.72969 5.57692 5.02216 6.06846 4.50149V4.50149ZM8 14.753C7.09633 14.7536 6.20175 14.5732 5.36929 14.2224C4.53684 13.8716 3.78346 13.3577 3.15385 12.711C3.51445 12.198 3.97391 11.7618 4.50538 11.4279C5.48577 10.801 6.72654 10.4556 8 10.4556C9.27346 10.4556 10.5142 10.801 11.4935 11.4279C12.0254 11.7616 12.4852 12.1978 12.8462 12.711C12.2166 13.3577 11.4632 13.8717 10.6308 14.2225C9.79829 14.5733 8.90368 14.7537 8 14.753V14.753Z",
    svg_size: Size::new(16.0, 16.0),
    op: PaintOp::Fill,
};
pub static ALBUM: SvgIcon = SvgIcon {
    svg_path: "M8 9.13525C8.62838 9.13525 9.13778 8.62698 9.13778 8C9.13778 7.37302 8.62838 6.86475 8 6.86475C7.37162 6.86475 6.86222 7.37302 6.86222 8C6.86222 8.62698 7.37162 9.13525 8 9.13525Z M13.6316 2.38084C12.8934 1.63695 12.0151 1.04594 11.0473 0.641744C10.0794 0.237552 9.04105 0.0281534 7.99185 0.0255768C6.94265 0.0230002 5.90328 0.227297 4.93345 0.626729C3.96362 1.02616 3.08244 1.61286 2.34054 2.35311C1.59864 3.09337 1.01065 3.97259 0.610326 4.94028C0.210006 5.90796 0.00525619 6.94503 0.00783853 7.9919C0.0104209 9.03878 0.220285 10.0748 0.625374 11.0405C1.03046 12.0062 1.62279 12.8826 2.36833 13.6192C3.10657 14.3631 3.98484 14.9541 4.95269 15.3583C5.92054 15.7625 6.95889 15.9719 8.00809 15.9744C9.05729 15.977 10.0967 15.7727 11.0665 15.3733C12.0363 14.9738 12.9175 14.3872 13.6594 13.6469C14.4013 12.9066 14.9893 12.0274 15.3896 11.0597C15.7899 10.0921 15.9947 9.05498 15.9921 8.00811C15.9895 6.96123 15.7797 5.92518 15.3746 4.95948C14.9695 3.99377 14.3772 3.11745 13.6316 2.38084V2.38084ZM7.99997 10.8381C7.4374 10.8381 6.88745 10.6717 6.41969 10.3598C5.95192 10.048 5.58734 9.60472 5.37205 9.08612C5.15676 8.56751 5.10043 7.99686 5.21019 7.44631C5.31994 6.89577 5.59085 6.39006 5.98865 5.99314C6.38645 5.59622 6.89328 5.32591 7.44505 5.2164C7.99682 5.10689 8.56874 5.16309 9.08849 5.37791C9.60825 5.59272 10.0525 5.95649 10.365 6.42322C10.6776 6.88995 10.8444 7.43867 10.8444 8.00001C10.8436 8.75247 10.5436 9.47387 10.0104 10.0059C9.47711 10.538 8.75411 10.8373 7.99997 10.8381V10.8381Z",
    svg_size: Size::new(16.0, 16.0),
    op: PaintOp::Fill,
};
pub static PLAYLIST: SvgIcon = SvgIcon {
    svg_path: "M8 0.0191851C3.58885 0.0191851 0 3.59942 0 8C0 12.4006 3.58885 15.9808 8 15.9808C12.4112 15.9808 16 12.4006 16 8C16 3.59942 12.4112 0.0191851 8 0.0191851ZM5.53846 11.0504C5.53846 11.2132 5.47363 11.3693 5.35822 11.4845C5.24281 11.5996 5.08629 11.6643 4.92308 11.6643H4.30769C4.14448 11.6643 3.98796 11.5996 3.87255 11.4845C3.75714 11.3693 3.69231 11.2132 3.69231 11.0504V10.4365C3.69231 10.2736 3.75714 10.1175 3.87255 10.0024C3.98796 9.88722 4.14448 9.82254 4.30769 9.82254H4.92308C5.08629 9.82254 5.24281 9.88722 5.35822 10.0024C5.47363 10.1175 5.53846 10.2736 5.53846 10.4365V11.0504ZM5.53846 8.32614C5.53846 8.48896 5.47363 8.64511 5.35822 8.76024C5.24281 8.87537 5.08629 8.94005 4.92308 8.94005H4.30769C4.14448 8.94005 3.98796 8.87537 3.87255 8.76024C3.75714 8.64511 3.69231 8.48896 3.69231 8.32614V7.71223C3.69231 7.54941 3.75714 7.39326 3.87255 7.27813C3.98796 7.163 4.14448 7.09832 4.30769 7.09832H4.92308C5.08629 7.09832 5.24281 7.163 5.35822 7.27813C5.47363 7.39326 5.53846 7.54941 5.53846 7.71223V8.32614ZM5.53846 5.56355C5.53846 5.72637 5.47363 5.88252 5.35822 5.99765C5.24281 6.11278 5.08629 6.17746 4.92308 6.17746H4.30769C4.14448 6.17746 3.98796 6.11278 3.87255 5.99765C3.75714 5.88252 3.69231 5.72637 3.69231 5.56355V4.94964C3.69231 4.78682 3.75714 4.63067 3.87255 4.51554C3.98796 4.40041 4.14448 4.33573 4.30769 4.33573H4.92308C5.08629 4.33573 5.24281 4.40041 5.35822 4.51554C5.47363 4.63067 5.53846 4.78682 5.53846 4.94964V5.56355ZM12.3077 11.3573H6.33346V10.1295H12.3077V11.3573ZM12.3077 8.63309H6.33346V7.40528H12.3077V8.63309ZM12.3077 5.8705H6.33346V4.64269H12.3077V5.8705Z",
    svg_size: Size::new(16.0, 16.0),
    op: PaintOp::Fill,
};

#[derive(Copy, Clone)]
pub enum PaintOp {
    Fill,
    Stroke { width: f64 },
}

#[derive(Clone)]
pub struct SvgIcon {
    svg_path: &'static str,
    svg_size: Size,
    op: PaintOp,
}

impl SvgIcon {
    pub fn scale(&self, to_size: impl Into<Size>) -> Icon {
        let to_size = to_size.into();
        let bez_path = BezPath::from_svg(self.svg_path).expect("Failed to parse SVG");
        let scale = Affine::scale_non_uniform(
            to_size.width / self.svg_size.width,
            to_size.height / self.svg_size.height,
        );
        Icon::new(self.op, bez_path, to_size, scale)
    }
}

#[derive(Clone)]
pub struct Icon {
    op: PaintOp,
    bez_path: BezPath,
    size: Size,
    scale: Affine,
    color: KeyOrValue<Color>,
}

impl Icon {
    pub fn new(op: PaintOp, bez_path: BezPath, size: Size, scale: Affine) -> Self {
        Icon {
            op,
            bez_path,
            size,
            scale,
            color: theme::ICON_COLOR.into(),
        }
    }

    pub fn with_color(mut self, color: impl Into<KeyOrValue<Color>>) -> Self {
        self.set_color(color);
        self
    }

    pub fn set_color(&mut self, color: impl Into<KeyOrValue<Color>>) {
        self.color = color.into();
    }
}

impl<T> Widget<T> for Icon {
    fn event(&mut self, _ctx: &mut EventCtx, _ev: &Event, _data: &mut T, _env: &Env) {}

    fn lifecycle(&mut self, _ctx: &mut LifeCycleCtx, _ev: &LifeCycle, _data: &T, _env: &Env) {}

    fn update(&mut self, _ctx: &mut UpdateCtx, _old_data: &T, _data: &T, _env: &Env) {}

    fn layout(&mut self, _ctx: &mut LayoutCtx, bc: &BoxConstraints, _data: &T, _env: &Env) -> Size {
        bc.constrain(self.size)
    }

    fn paint(&mut self, ctx: &mut PaintCtx, _data: &T, env: &Env) {
        let color = self.color.resolve(env);
        ctx.with_save(|ctx| {
            ctx.transform(self.scale);
            match self.op {
                PaintOp::Fill => ctx.fill(&self.bez_path, &color),
                PaintOp::Stroke { width } => ctx.stroke(&self.bez_path, &color, width),
            }
        });
    }
}
